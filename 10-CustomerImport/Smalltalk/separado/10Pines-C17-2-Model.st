Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'RodrigoOscarKapobel 11/20/2017 01:08'!isIdentifiedAs:anIdentificationType numbered:anIdentificationNumber	^identificationType = anIdentificationType and: 	[identificationNumber = anIdentificationNumber]! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImportTest methodsFor: 'asserting' stamp: 'alavia 11/16/2017 19:38'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 2.	self		assert: customer		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: customer		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 14:22'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 14:22'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 14:22'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 14:23'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomersSize equals: 2! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'alavia 11/16/2017 19:38'!alwaysImportedCustomer	^ system		customerIdentifiedAs: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber		ifNone: [ self fail ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 01:12'!testCanNotImportAddressWithoutCustomer	self		should: [ system importCustomersFrom: self addressWithoutCustomerTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'alavia 11/13/2017 21:11'!testEmptyLinesAreRecognizedAsInvalidRecords	self		should: [ system importCustomersFrom: self dataWithEmptyLine.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 01:13'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ system				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 01:14'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ system				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 01:13'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ system				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'alavia 11/13/2017 21:11'!testCanNotImportAddressRecordWithMoreThanSixFields	self		should: [ system				importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'alavia 11/13/2017 21:11'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self		should: [ system				importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'alavia 11/13/2017 21:11'!testCanNotImportAddressRecordWithLessThanSixFields	self		should: [ system				importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'alavia 11/13/2017 21:11'!testImportCustomers	system importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:45'!setUp	system := Environment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 11:25'!tearDown	system commit.	system close! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !Object subclass: #CustomerImporter	instanceVariableNames: 'line readStream record newCustomer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'RodrigoOscarKapobel 11/20/2017 13:32'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 00:40'!importCustomer	self assertValidCustomerRecordSize.		newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system addCustomer: newCustomer! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'initialization' stamp: 'alavia 11/16/2017 19:53'!initializeOn: aReadStream on: aSession	readStream := aReadStream.	system := aSession.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 15:40'!from: aReadStream on: aSession	^self new initializeOn: aReadStream on: aSession! !Object subclass: #ERPSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!ERPSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:23'!beginTransaction	^ self subclassResponsibility! !!ERPSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:23'!close	^ self subclassResponsibility! !!ERPSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:23'!start	^ self subclassResponsibility! !!ERPSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:23'!commit	^ self subclassResponsibility! !ERPSystem subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerSystem methodsFor: 'importing' stamp: 'alavia 11/16/2017 20:40'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream on: self) import! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!beginTransaction	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!close	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!allCustomers	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!commit	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!start	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!allCustomersSize	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!isCustomersEmpty	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!customerIdentifiedAs: arg1 numbered: arg2 ifNone: arg3 	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:20'!addCustomer: arg1 	^ self subclassResponsibility! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'accessing' stamp: 'alavia 11/21/2017 23:12'!current	^self subclasses detect: [ :aEnvironmentClass | aEnvironmentClass isCurrent ].! !!Environment class methodsFor: 'actions' stamp: 'alavia 11/21/2017 23:12'!createSupplierSystem	self subclassResponsibility ! !!Environment class methodsFor: 'actions' stamp: 'RodrigoOscarKapobel 11/20/2017 12:09'!createCustomerSystem	self subclassResponsibility ! !!Environment class methodsFor: 'actions' stamp: 'RodrigoOscarKapobel 11/20/2017 12:05'!isCurrent	self subclassResponsibility! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'actions' stamp: 'alavia 11/21/2017 23:13'!createCustomerSystem	^TransientCustomerSystem new.! !!DevelopmentEnvironment class methodsFor: 'actions' stamp: 'alavia 11/21/2017 23:49'!isCurrent	^false.! !!DevelopmentEnvironment class methodsFor: 'actions' stamp: 'alavia 11/21/2017 23:12'!createSupplierSystemWith: aCustomerSystem	^TransientSupplierSystem with: aCustomerSystem.! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'actions' stamp: 'alavia 11/21/2017 23:13'!createCustomerSystem	^PersistentCustomerSystem new.! !!IntegrationEnvironment class methodsFor: 'actions' stamp: 'alavia 11/21/2017 23:13'!isCurrent	^DevelopmentEnvironment isCurrent not.! !!IntegrationEnvironment class methodsFor: 'actions' stamp: 'alavia 11/21/2017 23:13'!createSupplierSystemWith: aCustomerSystem	^PersistentSupplierSystem with: aCustomerSystem.	! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentCustomerSystem methodsFor: 'customers' stamp: 'alavia 11/16/2017 20:04'!allCustomers	^ session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 01:12'!isCustomersEmpty	^ self allCustomers isEmpty! !!PersistentCustomerSystem methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 00:22'!allCustomersSize	^ self allCustomers size! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'alavia 11/13/2017 20:59'!initialize	super initialize.	self initializeSession.! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:04'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:04'!close	session close! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:04'!commit	session commit! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:31'!start	session open! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/13/2017 20:54'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/13/2017 20:56'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 11:51'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping)! !!PersistentCustomerSystem methodsFor: 'persistance' stamp: 'RodrigoOscarKapobel 11/20/2017 00:42'!addCustomer: aCustomer	session persist: aCustomer .! !!PersistentCustomerSystem methodsFor: 'accesing' stamp: 'alavia 11/16/2017 20:04'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	customers size = 1		ifTrue: [ ^ customers anyOne ]		ifFalse: noneBlock.	^ self! !Object subclass: #Supplier	instanceVariableNames: 'id name identificationType identificationNumber addresses customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Supplier methodsFor: 'customers' stamp: 'RodrigoOscarKapobel 11/20/2017 17:07'!customers	^ customers! !!Supplier methodsFor: 'customers' stamp: 'RodrigoOscarKapobel 11/20/2017 17:09'!numberOfCustomers		^customers size! !!Supplier methodsFor: 'customers' stamp: 'RodrigoOscarKapobel 11/20/2017 17:08'!customersIsEmpty		^customers isEmpty! !!Supplier methodsFor: 'customers' stamp: 'RodrigoOscarKapobel 11/20/2017 17:07'!addCustomer: aCustomer 	customers add: aCustomer ! !!Supplier methodsFor: 'initialization' stamp: 'RodrigoOscarKapobel 11/20/2017 17:21'!initialize	super initialize.	addresses := OrderedCollection new.	customers := OrderedCollection new.! !!Supplier methodsFor: 'addresses' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!addAddress: anAddress 	addresses add: anAddress ! !!Supplier methodsFor: 'addresses' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!addresses	^ addresses! !!Supplier methodsFor: 'addresses' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!addressesIsEmpty		^addresses isEmpty! !!Supplier methodsFor: 'addresses' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!numberOfAddresses		^addresses size! !!Supplier methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 18:35'!customerWithIdType: anIdType andIdNumber: anIdNumber ifNone: noneClosure 		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdType numbered: anIdNumber ] ifNone: noneClosure ! !!Supplier methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 17:07'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'name' stamp: 'alavia 11/21/2017 23:46'!name		^name ! !!Supplier methodsFor: 'name' stamp: 'alavia 11/21/2017 23:46'!name: aName 	name := aName! !!Supplier methodsFor: 'identification' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Supplier methodsFor: 'identification' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!identificationType		^identificationType ! !!Supplier methodsFor: 'identification' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!isIdentifiedAs:anIdentificationType numbered:anIdentificationNumber	^identificationType = anIdentificationType and: 	[identificationNumber = anIdentificationNumber]! !!Supplier methodsFor: 'identification' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Supplier methodsFor: 'identification' stamp: 'RodrigoOscarKapobel 11/20/2017 13:28'!identificationNumber		^identificationNumber ! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'system customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'alavia 11/21/2017 22:41'!alwaysImportedSupplierRecord	^ 'S,Supplier1,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'RodrigoOscarKapobel 11/20/2017 15:44'!supplierRecordWithLessThanFourFieldsTestData		^ ReadStream on: 'S,Pepe,D'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'RodrigoOscarKapobel 11/20/2017 15:20'!supplierRecordStartingWithMoreThanOneSTestData		^ ReadStream on:'SS,Pepe,D,22333444'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'RodrigoOscarKapobel 11/20/2017 15:37'!supplierRecordWithMoreThanFourFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,',x'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'RodrigoOscarKapobel 11/20/2017 14:46'!alwaysImportedSupplier	^ system		supplierIdentifiedAs: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber		ifNone: [ self fail ]! !!SupplierImportTest methodsFor: 'asserting' stamp: 'alavia 11/21/2017 22:42'!assertPepeSanchezSupplierWithNewCustomersWasImportedCorrectly	| supplier idType idNumber |	idType := 'D'.	idNumber := '22333444'.	supplier := system		supplierIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: supplier		isNamed: 'Supplier1'		identfiedAs: idType		withNumber: idNumber		numberOfCustomers: 1		andNumberOfAddresses: 2.	self		assert: supplier		hasCustomerWithFirstName: 'Pepe'		lastName: 'Sanchez'		idType: idType		idNumber: idNumber.	self		assert: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: supplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 14:05'!assertImportedSuppliersSizeIsCorrect	self assert: system allSuppliersSize equals: 1! !!SupplierImportTest methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 14:30'!assert: aSupplier hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province 	| address |		address := aSupplier  addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'alavia 11/21/2017 22:43'!assertPepeSanchezSupplierWithoutCustomersWasImportedCorrectly	| supplier idType idNumber |	idType := 'D'.	idNumber := '22333444'.	supplier := system		supplierIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: supplier		isNamed: 'Supplier1'		identfiedAs: idType		withNumber: idNumber		numberOfCustomers: 0		andNumberOfAddresses: 2.	self		assert: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: supplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'alavia 11/21/2017 22:46'!assert: aSupplier isNamed: name identfiedAs: idType withNumber: idNumber numberOfCustomers: customersSize andNumberOfAddresses: addressesSize 	self assert: aSupplier name equals: name.	self assert: aSupplier identificationType equals: idType.	self assert: aSupplier identificationNumber equals: idNumber.	self assert: aSupplier numberOfCustomers equals: customersSize.	self assert: aSupplier numberOfAddresses equals: addressesSize.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'alavia 11/21/2017 22:46'!assert: aSupplier hasCustomerWithFirstName: aFirstName lastName: aLastName idType: anIdType idNumber: anIdNumber 	| customer |		customer := aSupplier customerWithIdType: anIdType andIdNumber: anIdNumber ifNone: [ self fail ].	self assert: customer firstName equals: aFirstName.	self assert: customer lastName equals: aLastName.	self assert: customer identificationType equals: anIdType.	self assert: customer identificationNumber equals: anIdNumber.! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 16:24'!alwaysImportedExistingCustomerRecord	^ 'EC,D,5456774'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 14:09'!alwaysImportedCustomerIdType	^ 'D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 16:23'!alwaysImportedNewCustomerRecord	^ 'NC,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 14:09'!alwaysImportedCustomerIdNumber	^ '22333444'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'RodrigoOscarKapobel 11/20/2017 16:04'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'RodrigoOscarKapobel 11/20/2017 16:07'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'RodrigoOscarKapobel 11/20/2017 16:02'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedSupplierRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'RodrigoOscarKapobel 11/20/2017 14:51'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data' stamp: 'RodrigoOscarKapobel 11/20/2017 16:53'!validTestDataWithNewCustomers	^ ReadStream on: self alwaysImportedSupplierRecord,'',self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data' stamp: 'RodrigoOscarKapobel 11/20/2017 16:27'!validTestDataWithoutCustomers	^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data' stamp: 'RodrigoOscarKapobel 11/20/2017 14:48'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data' stamp: 'RodrigoOscarKapobel 11/20/2017 16:54'!validTestDataWithExistingCustomers	^ ReadStream on: self alwaysImportedSupplierRecord,'',self alwaysImportedExistingCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'alavia 11/22/2017 00:13'!setUp	customerSystem := Environment current createCustomerSystem .	"esto tiene que estar aca o se inicializa con el SupplierSystem de una?"	customerSystem start.	customerSystem beginTransaction.		system := Environment current createSupplierSystemWith: customerSystem .	system start.	system beginTransaction! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'alavia 11/22/2017 00:17'!tearDown	system commit.	system close.		customerSystem commit.	customerSystem close.! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 16:06'!testCanNotImportAddressRecordWithMoreThanSixFields	self		should: [ system				importSuppliersFrom: self addressRecordWithMoreThanSixFieldsTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 15:23'!testCanNotImportAddressWithoutSupplier	self		should: [ system importSuppliersFrom: self addressWithoutCustomerTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter addressWithoutSupplierErrorDescription.			self assert: system isSuppliersEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 16:03'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self		should: [ system				importSuppliersFrom: self addressRecordStartingWithMoreThanOneATestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 16:05'!testCanNotImportAddressRecordWithLessThanSixFields	self		should: [ system				importSuppliersFrom: self addressRecordWithLessThanSixFieldsTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 14:47'!testEmptyLinesAreRecognizedAsInvalidRecords	self		should: [ system importSuppliersFrom: self dataWithEmptyLine.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'alavia 11/21/2017 22:25'!testCanImportSuppliersWithNewCustomers	"---"	system importSuppliersFrom: self validTestDataWithNewCustomers.		self assertImportedSuppliersSizeIsCorrect.	self assertPepeSanchezSupplierWithNewCustomersWasImportedCorrectly.	! !!SupplierImportTest methodsFor: 'testing' stamp: 'Anonymous 11/21/2017 22:11'!testCanNotImportSuppliersWithExistingCustomersNotPersistedBefore	"---"	self		should: [ system importSuppliersFrom: self validTestDataWithExistingCustomers.		self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter existingCustomerNotPersistedErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]	! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 15:42'!testCanNotImportSupplierRecordWithLessThanFourFields	self		should: [ system				importSuppliersFrom: self supplierRecordWithLessThanFourFieldsTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: system isSuppliersEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 15:25'!testShouldNotImportSupplierRecordsStartingWithMoreThanS	self		should: [ system				importSuppliersFrom: self supplierRecordStartingWithMoreThanOneSTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: system isSuppliersEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 17:22'!testCanImportSuppliersWithoutCustomers	system importSuppliersFrom: self validTestDataWithoutCustomers.		self assertImportedSuppliersSizeIsCorrect.	self assertPepeSanchezSupplierWithoutCustomersWasImportedCorrectly.	! !!SupplierImportTest methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 15:39'!testCanNotImportSupplierRecordWithMoreThanFourFields	self		should: [ system				importSuppliersFrom: self supplierRecordWithMoreThanFourFieldsTestData.			self ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: system isSuppliersEmpty ]! !Object subclass: #SupplierImporter	instanceVariableNames: 'line readStream record newCustomer system newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImporter methodsFor: 'importing' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'importing - private' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing - private' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'alavia 11/22/2017 00:33'!importRecord		self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExistingCustomerRecord ifTrue: [ ^self importExistingCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].	self isSupplierRecord ifTrue: [ ^self importSupplier ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'alavia 11/21/2017 23:49'!importSupplier	self assertValidSupplierRecordSize.		newSupplier := Supplier new.	newSupplier name: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.	system addSupplier: newSupplier! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'RodrigoOscarKapobel 11/20/2017 13:37'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].	! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'RodrigoOscarKapobel 11/20/2017 13:07'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'RodrigoOscarKapobel 11/20/2017 15:10'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutSupplierError ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'RodrigoOscarKapobel 11/20/2017 17:16'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.		^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'alavia 11/22/2017 00:36'!importNewCustomer	self assertValidCustomerRecordSize.		newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.		^newSupplier addCustomer: newCustomer! !!SupplierImporter methodsFor: 'error signal' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'RodrigoOscarKapobel 11/20/2017 17:00'!signalInvalidExistingCustomerRecord 		self error: self class invalidExistingCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'RodrigoOscarKapobel 11/20/2017 15:11'!signalAddressWithoutSupplierError	self error: self class addressWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'RodrigoOscarKapobel 11/20/2017 19:13'!signalExistingCustomerNotPersisted 		self error: self class existingCustomerNotPersistedErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'RodrigoOscarKapobel 11/20/2017 13:36'!signalInvalidSupplierRecord 		self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'initialization' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!initializeOn: aReadStream on: aSession	readStream := aReadStream.	system := aSession.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 16:59'!assertValidExistingCustomerRecordSize		record size ~= 3 ifTrue: [ self signalInvalidExistingCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!isCustomerRecord	^ record first = 'C'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 16:32'!isExistingCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 19:55'!importExistingCustomer	self assertValidExistingCustomerRecordSize.	"TODO: para el test realizado esto no devuelve nada porque no se persisten customers pero que sucede cuando deba hacerlo?"	newCustomer := system customerIdentifiedAs: record second numbered: record third ifNone: [ self signalExistingCustomerNotPersisted ].	^newSupplier addCustomer: newCustomer! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 16:32'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'RodrigoOscarKapobel 11/20/2017 16:59'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'error descriptions' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'RodrigoOscarKapobel 11/20/2017 14:55'!addressWithoutSupplierErrorDescription		^'There is no Supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'RodrigoOscarKapobel 11/20/2017 13:37'!invalidSupplierRecordErrorDescription		^'Invalid supplier record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'RodrigoOscarKapobel 11/20/2017 14:56'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'RodrigoOscarKapobel 11/20/2017 19:14'!existingCustomerNotPersistedErrorDescription	^'Trying to add an existing customer not persisted before'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'RodrigoOscarKapobel 11/20/2017 17:00'!invalidExistingCustomerRecordErrorDescription		^'Invalid existing customer record'! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!from: aReadStream on: aSession	^self new initializeOn: aReadStream on: aSession! !ERPSystem subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierSystem methodsFor: 'importing' stamp: 'RodrigoOscarKapobel 11/20/2017 13:02'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream on: self) import! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:21'!supplierIdentifiedAs: arg1 numbered: arg2 ifNone: arg3 	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:22'!beginTransaction	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:21'!commit	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:21'!allSuppliers	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:21'!close	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:22'!isSuppliersEmpty	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:21'!start	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:21'!allSuppliersSize	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:21'!customerIdentifiedAs: arg1 numbered: arg2 ifNone: arg3 	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'accessing' stamp: 'RodrigoOscarKapobel 11/20/2017 22:21'!addSupplier: arg1 	^ self subclassResponsibility! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'customerSystem session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'alavia 11/21/2017 23:27'!initializeWith: aCustomerSystem	super initialize.	customerSystem := aCustomerSystem.	self initializeSession.! !!PersistentSupplierSystem methodsFor: 'persistance' stamp: 'RodrigoOscarKapobel 11/20/2017 19:57'!addSupplier: aSupplier	session persist: aSupplier.! !!PersistentSupplierSystem methodsFor: 'accessing' stamp: 'alavia 11/22/2017 00:11'!customerIdentifiedAs: arg1 numbered: arg2 ifNone: arg3 "aca le faltan los nombres a los parametros"	^customerSystem customerIdentifiedAs: arg1 numbered: arg2 ifNone: arg3.! !!PersistentSupplierSystem methodsFor: 'accesing' stamp: 'RodrigoOscarKapobel 11/20/2017 14:17'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	| suppliers |	suppliers := session		select: [ :aSupplier | 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber ] ]		ofType: Supplier.	suppliers size = 1		ifTrue: [ ^ suppliers anyOne ]		ifFalse: noneBlock.	^ self! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'RodrigoOscarKapobel 11/20/2017 14:06'!allSuppliers	^ session selectAllOfType: Supplier! !!PersistentSupplierSystem methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 14:10'!allSuppliersSize	^ self allSuppliers size! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 12:28'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 12:28'!close	session close! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 12:28'!commit	session commit! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 12:28'!start	session open! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 12:28'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/21/2017 22:34'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/21/2017 23:40'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self supplierMapping)! !!PersistentSupplierSystem methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 15:24'!isSuppliersEmpty	^ self allSuppliers isEmpty! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersistentSupplierSystem class	instanceVariableNames: ''!!PersistentSupplierSystem class methodsFor: 'instance creation' stamp: 'alavia 11/21/2017 23:28'!with: aCustomerSystem	^self new initializeWith: aCustomerSystem.! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientCustomerSystem methodsFor: 'initialization' stamp: 'alavia 11/16/2017 20:38'!initialize	super initialize.	customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'alavia 11/16/2017 20:44'!allCustomers	^customers copy.! !!TransientCustomerSystem methodsFor: 'persistance' stamp: 'RodrigoOscarKapobel 11/20/2017 00:40'!addCustomer: aCustomer	customers add: aCustomer .! !!TransientCustomerSystem methodsFor: 'accesing' stamp: 'RodrigoOscarKapobel 11/20/2017 01:07'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	customers detect: [:aCustomer | (aCustomer isIdentifiedAs: anIdentifycationType  numbered: anIdentificationNumber)]	         ifFound: [:aCustomer | ^aCustomer ] 				 ifNone: noneBlock .! !!TransientCustomerSystem methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 19:46'!allCustomersSize	^ customers size! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:44'!beginTransaction! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:39'!start! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:45'!close! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'alavia 11/16/2017 20:45'!commit! !!TransientCustomerSystem methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 19:43'!isCustomersEmpty	^ customers isEmpty! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'customerSystem suppliers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 19:49'!beginTransaction! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 19:49'!close! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 19:48'!commit! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'RodrigoOscarKapobel 11/20/2017 19:49'!start! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'RodrigoOscarKapobel 11/20/2017 19:45'!allSuppliers	^ suppliers copy! !!TransientSupplierSystem methodsFor: 'initialization' stamp: 'alavia 11/21/2017 23:26'!initializeWith: aCustomerSystem	super initialize.	customerSystem := aCustomerSystem.	suppliers := OrderedCollection new.! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'alavia 11/22/2017 00:11'!customerIdentifiedAs: arg1 numbered: arg2 ifNone: arg3 "aca le faltan los nombres a los parametros"	^customerSystem customerIdentifiedAs: arg1 numbered: arg2 ifNone: arg3.! !!TransientSupplierSystem methodsFor: 'persistance' stamp: 'RodrigoOscarKapobel 11/20/2017 19:57'!addSupplier: aSupplier	suppliers add: aSupplier.! !!TransientSupplierSystem methodsFor: 'testing' stamp: 'RodrigoOscarKapobel 11/20/2017 19:44'!isSuppliersEmpty	^ suppliers isEmpty! !!TransientSupplierSystem methodsFor: 'asserting' stamp: 'RodrigoOscarKapobel 11/20/2017 19:46'!allSuppliersSize	^ suppliers size.! !!TransientSupplierSystem methodsFor: 'accesing' stamp: 'RodrigoOscarKapobel 11/20/2017 19:52'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	suppliers detect: [:aSupplier | (aSupplier isIdentifiedAs: anIdentifycationType  numbered: anIdentificationNumber)]	         ifFound: [:aSupplier | ^aSupplier ] 				 ifNone: noneBlock .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TransientSupplierSystem class	instanceVariableNames: ''!!TransientSupplierSystem class methodsFor: 'instance creation' stamp: 'alavia 11/21/2017 23:27'!with: aCustomerSystem	^self new initializeWith: aCustomerSystem.! !
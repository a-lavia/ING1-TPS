Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses test'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'importing' stamp: 'Ale 11/6/2017 20:09'!importCustomers	"	self importCustomers	"	test importCustomers! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !TestCase subclass: #Tests	instanceVariableNames: 'session inputStream'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Tests methodsFor: 'importing' stamp: 'Ale 11/6/2017 20:47'!setUp	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !!Tests methodsFor: 'importing' stamp: 'Ale 11/6/2017 20:20'!tearDown	session commit.	session close! !!Tests methodsFor: 'importing' stamp: 'Ale 11/6/2017 21:47'!importCustomers	"	self importCustomers	""mover a CustomerImporter, add parameter aSession, aInputStream"	| newCustomer line |		inputStream := FileStream fileNamed: 'input.txt'.	"ReadStream on: 'blablabal'"		line := inputStream nextLine.	[ line notNil ]		whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					session persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData fourth.					newCustomer addAddress: newAddress ].			line := inputStream nextLine ].	inputStream close! !!Tests methodsFor: 'tests' stamp: 'Ale 11/6/2017 21:13'!test02	| addresses address |		self importCustomers .		addresses := session select: [:aAddress | aAddress town = 'Olivos'  ] ofType: Address.	address := addresses first.		"	A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresA,Alem,1122,CABA,1001,CABA (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))"	self assert: (addresses size = 1).	self assert: (address province = 'San Martin').	self assert: (address zipCode  = 'San Martin').	self assert: (address town = 'Olivos').	self assert: (address town = 'San Martin').! !!Tests methodsFor: 'tests' stamp: 'Anonymous 11/9/2017 19:09'!test01	| customers customer address |		self importCustomers .		customers := session selectAllOfType: Customer.	self assert: (customers size = 2).			customers := session select: [:aCustomer | aCustomer firstName = 'Pepe' ] ofType: Customer.	self assert: (customers size = 1). 			customer := customers anyOne.	self assert: (customer firstName = 'Pepe').	self assert: (customer lastName = 'Sanchez').	self assert: (customer identificationType  = 'D').	self assert: (customer identificationNumber  = '22333444').		self assert: customer addresses size equals: 2.		address := customer addresses detect: [ :anAddress | anAddress streetName = 'San Martin'].	"addressAt: 'San Martin' "	"	A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires"			customers := session select: [:aCustomer | aCustomer firstName = 'Juan' ] ofType: Customer.	self assert: (customers size = 1).		customer := customers anyOne .	self assert: (customer firstName = 'Juan').	self assert: (customer lastName = 'Perez').	self assert: (customer identificationType  = 'C').	self assert: (customer identificationNumber  = '23-25666777-9').! !